name: ChatGPT PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_review_comment:
    types: [created]

jobs:
  review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install OpenAI package
        run: npm install openai

      - name: ChatGPT PR Review
        uses: actions/github-script@v7
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        with:
          script: |
            const OpenAI = require('openai');
            const openai = new OpenAI({
              apiKey: process.env.OPENAI_API_KEY
            });

            // PRの情報を取得
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // PRの差分を取得
            const diff = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              mediaType: {
                format: 'diff'
              }
            });

            const completion = await openai.chat.completions.create({
              model: "gpt-4o-mini",
              messages: [
                {
                  role: "system",
                  content: `Next.jsとAWS CDKのコードレビューにおいて、次のポイントに基づいてレビューを行ってください。\n\n### Next.jsに関するチェック項目\n1. **コンポーネント設計**:\n   - コンポーネントは適切に分割され、再利用可能な形になっていますか？\n   - ステート管理が適切に設計され、不要なリレンダリングを防いでいますか？\n\n2. **パフォーマンス最適化**:\n   - サーバーサイドレンダリング（SSR）、静的サイト生成（SSG）、クライアントサイドレンダリング（CSR）が適切に選択されていますか？\n   - 動的データ取得が効率的に実装されていますか？\n   - 画像の最適化（`next/image`）やコード分割が適切に行われていますか？\n\n3. **アクセシビリティ**:\n   - ARIA属性やキーボード操作への対応など、アクセシビリティ基準を満たしていますか？\n   - 色やコントラストがWCAG基準を満たしていますか？\n\n4. **セキュリティ**:\n   - APIルートや環境変数が安全に管理されていますか？\n   - クロスサイトスクリプティング（XSS）やその他の脆弱性が防がれていますか？\n\n5. **コードのメンテナビリティ**:\n   - 型定義（TypeScript）が適切に使用されていますか？\n   - 一貫性のあるコードスタイルで記述されていますか？\n\n### AWS CDKに関するチェック項目\n1. **リソース設計**:\n   - スタックが適切に分割されており、責務が明確になっていますか？\n   - 再利用可能なConstructが活用されていますか？\n\n2. **セキュリティ**:\n   - IAMロールやポリシーが最小権限の原則に従っていますか？\n   - S3バケットやRDSインスタンスに暗号化が設定されていますか？\n   - セキュリティグループが不要に広範囲のアクセスを許可していませんか？\n\n3. **コスト効率**:\n   - リソースのプロビジョニングが過剰でないか確認してください（例: 過剰なCPUやメモリの設定）。\n   - スケーリングポリシーが適切に設定されていますか？\n\n4. **可読性**:\n   - CDKコードに十分なコメントがありますか？\n   - リソースの命名規則が一貫していますか？\n\n5. **デプロイの安全性**:\n   - デプロイ時にリソースの削除や重要データの損失が発生しないように配慮されていますか？\n   - テスト環境と本番環境で適切な設定が切り替えられていますか？\n\n### レビュー結果\n- Next.jsとAWS CDKのコードについて、以下のポイントを明確にフィードバックしてください。\n  1. 修正が必要な箇所とその理由。\n  2. 改善提案（具体的な方法）。\n  3. 良い実装や設計に対する肯定的なコメント。\n`
                },
                {
                  role: "user",
                  content: `以下のPRの差分をレビューしてください:\n\n${diff.data}`
                }
              ],
            });

            const review = completion.choices[0].message.content;

            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              body: review,
              event: 'COMMENT'
            });
